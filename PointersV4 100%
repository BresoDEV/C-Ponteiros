//POR O MODO DE COMPILACAO EM DEBUG x64 Aqui em cima, do lado do Depurador ^ ^ ^ ^ ^ 


#include <iostream>
#include <windows.h>
#include <iostream>
#include <vector>
#include <conio.h> 
#include <TlHelp32.h>
#include <stdio.h> 
#include <tchar.h> 
#include <iostream>
#include <windows.h>
#include <iostream>
#include <vector>
#include <conio.h> 
#include <TlHelp32.h>
#include <stdio.h> 
#include <tchar.h> 
#include <iomanip>  
 
using namespace std;


namespace Configuracoes_Jogo
{
	LPCWSTR Jogo = TEXT("Gameface");			//Nome da janela do jogo
	LPCWSTR Jogo_exe = TEXT("SanAndreas.exe");		//Nome do executavel do jogo .exe
}


namespace FuncoesUteis
{
	DWORD ID_Processo() // Funcionando
	{
		PROCESSENTRY32 pt;
		HANDLE hsnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
		pt.dwSize = sizeof(PROCESSENTRY32);
		if (Process32First(hsnap, &pt)) {  
			do {
				if (!lstrcmpi(pt.szExeFile, Configuracoes_Jogo::Jogo_exe)) {
					CloseHandle(hsnap);
					return pt.th32ProcessID;
				}
			} while (Process32Next(hsnap, &pt));
		}
		CloseHandle(hsnap);  
		return 0;
	}

	bool Check_JogoAberto()//Funcionando
	{
		HWND hWnd = FindWindow(0, Configuracoes_Jogo::Jogo);
		DWORD pId = ID_Processo();
		HANDLE process = OpenProcess(SYNCHRONIZE, FALSE, pId);
		DWORD ret = WaitForSingleObject(process, 0);
		CloseHandle(process);
		return ret == WAIT_TIMEOUT;
	}

	uintptr_t GetModuleBaseAddress(DWORD procId, const TCHAR* modName)//Funcionando
	{
		uintptr_t modBaseAddr = 0;
		HANDLE hSnap = CreateToolhelp32Snapshot(TH32CS_SNAPMODULE | TH32CS_SNAPMODULE32, procId);
		if (hSnap != INVALID_HANDLE_VALUE)
		{
			MODULEENTRY32 modEntry;
			modEntry.dwSize = sizeof(modEntry);
			if (Module32First(hSnap, &modEntry))
			{
				do
				{
					if (!lstrcmpi(modEntry.szModule, modName))
					{
						modBaseAddr = (uintptr_t)modEntry.modBaseAddr;
						break;
					}
				} while (Module32Next(hSnap, &modEntry));
			}
		}
		CloseHandle(hSnap);
		return modBaseAddr;


	}

	void SobrescreverMemoria_INT(long long Offset, int valor)//Funcionando LINDAMENTEEEEE
	{
		DWORD pId = FuncoesUteis::ID_Processo();
		HWND hWnd = FindWindow(0, Configuracoes_Jogo::Jogo);
		HANDLE hProc = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pId); 
		WriteProcessMemory(hProc, (void*)Offset, &valor, sizeof(valor), nullptr);
	}

	void SobrescreverMemoria_FLOAT(long long Offset, float valor)//Funcionando LINDAMENTEEEEE
	{
		DWORD pId = FuncoesUteis::ID_Processo();
		HWND hWnd = FindWindow(0, Configuracoes_Jogo::Jogo);
		HANDLE hProc = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pId);
		WriteProcessMemory(hProc, (void*)Offset, &valor, sizeof(valor), nullptr);
	}

	void SobrescreverMemoria_STRING(long long Offset, string valor)//Funcionando LINDAMENTEEEEE
	{
		DWORD pId = FuncoesUteis::ID_Processo();
		HWND hWnd = FindWindow(0, Configuracoes_Jogo::Jogo);
		HANDLE hProc = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pId);
		WriteProcessMemory(hProc, (void*)Offset, valor.c_str(), sizeof(valor), nullptr);
	}

	long long Pegar_Endereco(long long Offset) //pronto
	{
		/*
		Quando for globais, exemplo GTAV.exe+524F0D8
		Usa-se o valor dps da adicao
		Int::Com_Modulo::Pegar_Endereco(0x524F0D8)
		Ele retorna a memoria correspondente ao GTAV.exe+524F0D8
		*/
		HWND hWnd = FindWindow(0, Configuracoes_Jogo::Jogo);
		HANDLE hProc = OpenProcess(PROCESS_ALL_ACCESS, FALSE, FuncoesUteis::ID_Processo());
		long long Modulo_Base_Jogo = FuncoesUteis::GetModuleBaseAddress(FuncoesUteis::ID_Processo(), Configuracoes_Jogo::Jogo_exe);
		long long base = Modulo_Base_Jogo + Offset;
		return base;
	}

}


//Pronto
namespace Int
{
	namespace Com_Modulo
	{
		void Escrever(DWORD Offset, int valor)
		{
			/*Exemplo:
			Quando for globais, exemplo GTAV.exe+524F0D8
			Usa-se o valor dps da adicao
			Int::Com_Modulo::Escrever(0x524F0D8, 30);

			*/
			HWND hWnd = FindWindow(0, Configuracoes_Jogo::Jogo);
			DWORD pId;
			GetWindowThreadProcessId(hWnd, &pId);
			HANDLE hProc = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pId);
			DWORD Modulo_Base_Jogo = FuncoesUteis::GetModuleBaseAddress(pId, Configuracoes_Jogo::Jogo_exe);
			DWORD base = Modulo_Base_Jogo + Offset;
			//return WriteProcessMemory(hProc, (void*)base, &valor, sizeof(valor), nullptr);
			FuncoesUteis::SobrescreverMemoria_INT(base, valor);
		}

		int Ler(DWORD offset)
		{
			/*Exemplo:
			Quando for globais, exemplo GTAV.exe+524F0D8
			Usa-se o valor dps da adicao
			cout << Int::Com_Modulo::Ler(0x524F0D8);

			*/
			 
			uintptr_t mod = FuncoesUteis::GetModuleBaseAddress(FuncoesUteis::ID_Processo(), Configuracoes_Jogo::Jogo_exe);
			mod += offset;
			HANDLE wesnoth_process = OpenProcess(PROCESS_ALL_ACCESS, true, FuncoesUteis::ID_Processo());
			DWORD gold_value = 0;
			DWORD bytes_read = 0;
			ReadProcessMemory(wesnoth_process, (void*)mod, &gold_value, 4, nullptr);
			return gold_value;

		}

		
	}

	namespace Fixos
	{
		void Escrever(long long Offset, int valor)
		{
			/*
			Usado quando é uma memoria qualquer 
			 Int::Fixos::Escrever(0x7FF656F6F0D8, 86);
			 
			 */
			HWND hWnd = FindWindow(0, Configuracoes_Jogo::Jogo);
			DWORD pId;
			GetWindowThreadProcessId(hWnd, &pId);
			HANDLE hProc = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pId); 
			//return WriteProcessMemory(hProc, (void*)base, &valor, sizeof(valor), nullptr);
			FuncoesUteis::SobrescreverMemoria_INT(Offset, valor);
		}

		int Ler(long long offset)
		{  
			/*
			Usado quando é uma memoria qualquer
			 cout << Int::Fixos::Ler(0x7FF656F6F0D8);

			 */
			long long address = offset; // This is the address that we want to read from
			HANDLE wesnoth_process = OpenProcess(PROCESS_ALL_ACCESS, true, FuncoesUteis::ID_Processo());
			long long gold_value = 0;
			ReadProcessMemory(wesnoth_process, (void*)address, &gold_value, 4, nullptr);
			return gold_value;
		}
	}

}

namespace Float
{
	namespace Fixos
	{
		void Escrever(long long Offset, float valor)
		{
			/*
			Float::Fixos::Escrever(0x199021E4D70, 666.0);
			*/
			HWND hWnd = FindWindow(0, Configuracoes_Jogo::Jogo);
			DWORD pId;
			GetWindowThreadProcessId(hWnd, &pId);
			HANDLE hProc = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pId);
			//return WriteProcessMemory(hProc, (void*)base, &valor, sizeof(valor), nullptr);
			FuncoesUteis::SobrescreverMemoria_FLOAT(Offset, valor);
		}

		float Ler(long long offset)
		{
			/*
			cout << Float::Fixos::Ler(0x199021E4D70) << endl;
			*/
			long long address = offset;
			HANDLE wesnoth_process = OpenProcess(PROCESS_ALL_ACCESS, true, FuncoesUteis::ID_Processo());
			float gold_value = 0;
			ReadProcessMemory(wesnoth_process, (void*)address, &gold_value, 4, nullptr);
			return gold_value;
		}

		
	}
	
	
	namespace Com_Modulo
	{
		float Ler(long long Offset)//pronto
		{
			/*Exemplo:
			Quando for globais, exemplo GTAV.exe+524F0D8
			Usa-se o valor dps da adicao
			cout << Float::Com_Modulo::Ler(0x524F0D8);

			*/
			uintptr_t mod = FuncoesUteis::GetModuleBaseAddress(FuncoesUteis::ID_Processo(), Configuracoes_Jogo::Jogo_exe);
			mod += Offset;
			HANDLE wesnoth_process = OpenProcess(PROCESS_ALL_ACCESS, true, FuncoesUteis::ID_Processo());
			float gold_value = 0;
			DWORD bytes_read = 0;
			ReadProcessMemory(wesnoth_process, (void*)mod, &gold_value, 4, nullptr);
			return gold_value;
		}

		void Escrever(long long Offset, float valor)//pronto
		{
			/*
			Float::Com_Modulo::Escrever(0x53A66A0, 123.456);
			*/
			HWND hWnd = FindWindow(0, Configuracoes_Jogo::Jogo); 
			HANDLE hProc = OpenProcess(PROCESS_ALL_ACCESS, FALSE, FuncoesUteis::ID_Processo());
			long long Modulo_Base_Jogo = FuncoesUteis::GetModuleBaseAddress(FuncoesUteis::ID_Processo(), Configuracoes_Jogo::Jogo_exe);
			long long base = Modulo_Base_Jogo + Offset;
			//return WriteProcessMemory(hProc, (void*)base, &valor, sizeof(valor), nullptr);
			FuncoesUteis::SobrescreverMemoria_FLOAT(base, valor); 
		} 
		 
	}
 
}

namespace String
{

	namespace Com_Modulo
	{

		void Escrever(long long Offset, string valor)
		{ 
			/*
			* Quando for globais, exemplo GTAV.exe+524F0D8
			Usa-se o valor dps da adicao
			String::Com_Modulo::Escrever(0x524F0D8, "Bixa");
			*/
			HWND hWnd = FindWindow(0, Configuracoes_Jogo::Jogo);
			HANDLE hProc = OpenProcess(PROCESS_ALL_ACCESS, FALSE, FuncoesUteis::ID_Processo()); 
			FuncoesUteis::SobrescreverMemoria_STRING(FuncoesUteis::Pegar_Endereco(Offset), valor); 
		}

		string Ler(long long offset)
		{ 
			/*
			Quando for globais, exemplo GTAV.exe+534B7D7
			Usa-se o valor dps da adicao
			String::Com_Modulo::Ler(0x534B7D7)
			*/
			HWND hWnd = FindWindow(0, Configuracoes_Jogo::Jogo);
			HANDLE hProc = OpenProcess(PROCESS_ALL_ACCESS, FALSE, FuncoesUteis::ID_Processo());
			char mode[5000];
			ReadProcessMemory(hProc, (LPVOID*)FuncoesUteis::Pegar_Endereco(offset), &mode, sizeof(mode), NULL);
			return mode;
		}
		 
	}
	namespace Fixos
	{
		void Escrever(long long Offset, string valor)
		{
			/*
			String::Fixos::Escrever(0x7FF65E6AB7D7, "Fix");
			*/
			HWND hWnd = FindWindow(0, Configuracoes_Jogo::Jogo);
			HANDLE hProc = OpenProcess(PROCESS_ALL_ACCESS, FALSE, FuncoesUteis::ID_Processo());
			FuncoesUteis::SobrescreverMemoria_STRING(Offset, valor);
		}

		string Ler(long long offset)
		{ 
			/* 
			String::Fixos::Ler(0x7FF65E6AB7D7)
			*/
			HWND hWnd = FindWindow(0, Configuracoes_Jogo::Jogo);
			HANDLE hProc = OpenProcess(PROCESS_ALL_ACCESS, FALSE, FuncoesUteis::ID_Processo());
			char mode[5000];
			ReadProcessMemory(hProc, (LPVOID*)offset, &mode, sizeof(mode), NULL);
			return mode; 
		}
	}
	

}


namespace Ponteiros
{
	 
}

uintptr_t Retornar_Endereco_Ponteiro(uintptr_t OffsetPrincipal, std::vector<unsigned int> offsets)
{
	/*
	Retorna o endereco final via um ponteiro
	Quando for globais, exemplo GTAV.exe+524F0D8, e os ponteiros 0x25, 0x10 por exemplo
	 Retornar_Endereco_Ponteiro(0x524F0D8, { 0x25 , 0x10 })
	*/
	HWND hWnd = FindWindow(0, Configuracoes_Jogo::Jogo);
	HANDLE hProc = OpenProcess(PROCESS_ALL_ACCESS, FALSE, FuncoesUteis::ID_Processo());
	uintptr_t addr = FuncoesUteis::Pegar_Endereco(OffsetPrincipal);
	for (unsigned int i = 0; i < offsets.size(); i++)
	{
		ReadProcessMemory(hProc, (BYTE*)addr, &addr, sizeof(addr), 0);
		addr += offsets[i];
	}
	return addr;
}

void Escrever_Endereco_Ponteiro_INT(uintptr_t OffsetPrincipal, std::vector<unsigned int> offsets, int valor)
{
	/*
	Escreve o endereco final via um ponteiro
	Quando for globais, exemplo GTAV.exe+524F0D8, e os ponteiros 0x25, 0x10 por exemplo
	Escrever_Endereco_Ponteiro_INT( 0x524F0D8, { 0x25 , 0x10 }, 6666666666);
	*/
	HWND hWnd = FindWindow(0, Configuracoes_Jogo::Jogo);
	HANDLE hProc = OpenProcess(PROCESS_ALL_ACCESS, FALSE, FuncoesUteis::ID_Processo()); 
	FuncoesUteis::SobrescreverMemoria_INT(Retornar_Endereco_Ponteiro(OffsetPrincipal, offsets), valor);
}

void Escrever_Endereco_Ponteiro_FLOAT(uintptr_t OffsetPrincipal, std::vector<unsigned int> offsets, float valor)
{
	/*
	Escreve o endereco final via um ponteiro
	Quando for globais, exemplo GTAV.exe+524F0D8, e os ponteiros 0x25, 0x10 por exemplo
	Escrever_Endereco_Ponteiro_INT( 0x524F0D8, { 0x25 , 0x10 }, 10.000);
	*/
	HWND hWnd = FindWindow(0, Configuracoes_Jogo::Jogo);
	HANDLE hProc = OpenProcess(PROCESS_ALL_ACCESS, FALSE, FuncoesUteis::ID_Processo());
	FuncoesUteis::SobrescreverMemoria_FLOAT(Retornar_Endereco_Ponteiro(OffsetPrincipal, offsets), valor);
}

void Escrever_Endereco_Ponteiro_STRING(uintptr_t OffsetPrincipal, std::vector<unsigned int> offsets, string valor)
{
	/*
	Escreve o endereco final via um ponteiro
	Quando for globais, exemplo GTAV.exe+524F0D8, e os ponteiros 0x25, 0x10 por exemplo
	Escrever_Endereco_Ponteiro_INT( 0x524F0D8, { 0x25 , 0x10 }, "Bixinha");
	*/
	HWND hWnd = FindWindow(0, Configuracoes_Jogo::Jogo);
	HANDLE hProc = OpenProcess(PROCESS_ALL_ACCESS, FALSE, FuncoesUteis::ID_Processo());
	FuncoesUteis::SobrescreverMemoria_STRING(Retornar_Endereco_Ponteiro(OffsetPrincipal, offsets), valor);
}

int main()
{ 
 	 
}
 



 




 

